@page "/Register/nuevo"
@page "/Register/edit/{ID}"
@inject NavigationManager NavMan
@inject IJSRuntime JSx
@rendermode InteractiveServer
@using System.Text.Json

<PageTitle>Registrando...</PageTitle>

<center>
<h3>Introduzca los datos del accidente.</h3>
<i>
<p>(Fecha, descripción del accidente, costo, n. de muertos, n. de heridos y vehículos involucrados)</p>
</i>
</center>

<EditForm Model = "@Register" OnValidSubmit = "@GuardarRegistro">
    <DataAnnotationsValidator />

    <div class = "mb-3">
        <label for = "Fecha" class = "form-label">Fecha</label>
        <InputDate id = "Fecha" class = "form-control" @bind-Value = "@Register.Fecha" />
        <ValidationMessage For = "@(() => Register.Fecha)" />
    </div>

    <div class = "mb-3">
        <label for = "Descripcion" class = "form-label">Descripción</label>
        <InputTextArea id = "Descripcion" class = "form-control" @bind-Value = "@Register.Descripcion" />
        <ValidationMessage For = "@(() => Register.Descripcion)" />
    </div>

    <div class = "mb-3">
        <label for = "CostoEstimado" class = "form-label">Costo Estimado</label>
        <InputNumber id = "CostoEstimado" class = "form-control" @bind-Value = "@Register.CostoEstimado" />
        <ValidationMessage For = "@(() => Register.CostoEstimado)" />
    </div>

    <!--Los muertos y heridos-->

    <div class = "row">
        <div class = "col">
            <div class = "mb-3">
                <label for = "Muertos" class = "form-label">Muertos</label>
                <InputNumber id = "Muertos" class = "form-control" @bind-Value = "@Register.Muertos" />
                <ValidationMessage For = "@(() => Register.Muertos)" />
            </div>
        </div>
        <div class = "col">
            <div class = "mb-3">
                <label for = "Heridos" class = "form-label">Heridos</label>
                <InputNumber id = "Heridos" class = "form-control" @bind-Value = "@Register.Heridos" />
                <ValidationMessage For = "@(() => Register.Heridos)" />
            </div>
        </div>
        <div class = "col">
            <div class = "mb-3">
                <label for = "VehiculosInvolucrados" class = "form-label">Vehiculos involucrados</label>
                <InputNumber id = "VehiculosInvolucrados" class = "form-control" @bind-Value = "@Register.VehiculosInvolucrados" />
                <ValidationMessage For = "@(() => Register.VehiculosInvolucrados)" />
            </div>
        </div>
    </div>
    

    <div class = "text-center">

        <button type = "submit" class = "btn btn-success">Guardar datos</button>
    </div>

</EditForm>

@code{

    [Parameter]
    public string ID { get; set; } = null;

    private Reporte Register = new Reporte();

    List<Reporte> Registers = new List<Reporte>();

    private void GuardarRegistro(){

        if(string.IsNullOrEmpty(Register.ID)){

            Register.ID = Guid.NewGuid().ToString();
            Registers.Add(Register);
        }
        else{

            var index = Registers.FindIndex(x => x.ID == Register.ID);
            Registers[index] = Register;
        }

        //Registers.Add(Register);

        //Código para almacenar en Local Storage (MUY importante)
        JSx.InvokeVoidAsync("localStorage.setItem", "Registers", JsonSerializer.Serialize(Registers));

        NavMan.NavigateTo("Register");
    }

    //Cargar datos existentes del localStorage.
    protected override async Task OnAfterRenderAsync(bool firstRender){

        if (firstRender){

            //Accede al localStorage.
            var Jsonregisters = await JSx.InvokeAsync<string>("localStorage.getItem", "Registers");

            if (Jsonregisters != null){

                Registers = JsonSerializer.Deserialize<List<Reporte>>(Jsonregisters);

                    if(ID != null){

                        Register = Registers.FirstOrDefault(r => r.ID == ID)?? new Reporte();
                    }
                StateHasChanged();
            }
        }
    }
}